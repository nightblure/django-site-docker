name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

#      redis:
#        image: redis:6.2.10-alpine
#        ports:
#          - 6379:6379

    env:
      DOCKER_REPOSITORY: nightblure
      IMAGE_TAG: latest

    strategy:
      matrix:
        python-version: ['3.10']

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest pytest-cov

      - name: Install poetry
        env:
          POETRY_VERSION: "1.3.2"
        run: |
          sudo apt-get update
          curl -sSL "https://install.python-poetry.org" | python -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

#      - name: Install Poetry
#        run: |
#          sudo apt-get update
#          poetry install
#          poetry run pip install -U pip

      - name: Run tests and collect coverage
        run: |
          cd src
          poetry run pytest --cov=. --cov-report=xml

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3

#      - name: Run checks
#        run: |
#          cd project
#          poetry run flake8 .
#          poetry run pytest -rs

#      - name: Build and push Docker image on Docker Hub
#        run: |
#          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
#          docker build . --file ./Dockerfile --tag $DOCKER_REPOSITORY/django-news:$IMAGE_TAG --no-cache
#          docker push $DOCKER_REPOSITORY/django-news:$IMAGE_TAG
